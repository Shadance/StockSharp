<fluent:RibbonWindow
		xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
		xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
		xmlns:loc="clr-namespace:StockSharp.Localization;assembly=StockSharp.Localization"
		xmlns:hydra="clr-namespace:StockSharp.Hydra"
		xmlns:ex="clr-namespace:Ecng.Xaml;assembly=Ecng.Xaml" 
		xmlns:core="clr-namespace:StockSharp.Hydra.Core;assembly=StockSharp.Hydra.Core" 
		xmlns:sx="clr-namespace:StockSharp.Xaml;assembly=StockSharp.Xaml"
		xmlns:xctk="http://schemas.xceed.com/wpf/xaml/toolkit"
		xmlns:controls1="clr-namespace:wyDay.Controls;assembly=AutomaticUpdaterWPF"
		xmlns:componentModel="clr-namespace:System.ComponentModel;assembly=WindowsBase"
        xmlns:converters="clr-namespace:Ecng.Xaml.Converters;assembly=Ecng.Xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:fluent="urn:fluent-ribbon"
        xmlns:xcad="http://schemas.xceed.com/wpf/xaml/avalondock"
        x:Class="StockSharp.Hydra.MainWindow"
        x:Name="Window" mc:Ignorable="d"
        Loaded="MainWindowLoaded" DataContext="{Binding RelativeSource={RelativeSource Self}}"
    	Title="S#.Data" Height="516" Width="1376" WindowState="Normal"
>
    <fluent:RibbonWindow.Resources>
        <converters:BoolToOpacityConverter x:Key="BoolToOpacityConverter"/>
        <converters:InverseBooleanConverter x:Key="BoolToOppositeConverter"/>
        <converters:MultiBoolToOpacityConverter x:Key="MultiBoolToOpacityConverter"/>

        <LinearGradientBrush x:Key="CheckedBlue" StartPoint="0,0" EndPoint="0,1">
            <GradientStop Color="#FF285AB3" Offset="0" />
            <GradientStop Color="#FF4184EC" Offset="0.5" />
            <GradientStop Color="#FF558BED" Offset="0.5" />
            <GradientStop Color="#FF7DACF0" Offset="1" />
        </LinearGradientBrush>
        <SolidColorBrush x:Key="CheckedBlueBorder" Color="#FF143874" />
        <Style x:Key="OrangeSwitchStyle" TargetType="{x:Type CheckBox}">
            <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.WindowTextBrushKey}}" />
            <Setter Property="Background" Value="{DynamicResource {x:Static SystemColors.WindowBrushKey}}" />
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type CheckBox}">
                        <ControlTemplate.Resources>
                            <ResourceDictionary>
                                <Storyboard x:Key="OnChecking">
                                    <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="slider" Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[3].(TranslateTransform.X)">
                                        <SplineDoubleKeyFrame KeyTime="00:00:00.1000000" Value="30" />
                                    </DoubleAnimationUsingKeyFrames>
                                </Storyboard>
                                <Storyboard x:Key="OnUnchecking">
                                    <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="slider" Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[3].(TranslateTransform.X)">
                                        <SplineDoubleKeyFrame KeyTime="00:00:00.1000000" Value="0" />
                                    </DoubleAnimationUsingKeyFrames>
                                </Storyboard>
                            </ResourceDictionary>
                        </ControlTemplate.Resources>
                        <DockPanel x:Name="dockPanel">
                            <ContentPresenter SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" Content="{TemplateBinding Content}" ContentStringFormat="{TemplateBinding ContentStringFormat}" ContentTemplate="{TemplateBinding ContentTemplate}" RecognizesAccessKey="True" VerticalAlignment="Center" />
                            <Grid>
                                <Border x:Name="BackgroundBorder" BorderBrush="#FF939393" BorderThickness="1" CornerRadius="3" Height="20" Width="60">
                                    <Border.Background>
                                        <LinearGradientBrush StartPoint="0,0" EndPoint="0,1">
                                            <GradientStop Color="#FFB5B5B5" Offset="0" />
                                            <GradientStop Color="#FFDEDEDE" Offset="0.1" />
                                            <GradientStop Color="#FFEEEEEE" Offset="0.5" />
                                            <GradientStop Color="#FFFAFAFA" Offset="0.5" />
                                            <GradientStop Color="#FFFEFEFE" Offset="1" />
                                        </LinearGradientBrush>
                                    </Border.Background>
                                    <Grid>
                                        <Grid.ColumnDefinitions>
                                            <ColumnDefinition />
                                            <ColumnDefinition />
                                        </Grid.ColumnDefinitions>
                                        <Ellipse x:Name="Off" Width="10" Height="10" Stroke="#FF7A7A7A" StrokeThickness="2" Grid.Column="1" HorizontalAlignment="Center" VerticalAlignment="Center" />
                                        <Line x:Name="On" X1="0" Y1="2" X2="0" Y2="10" Stroke="#FF7A7A7A" StrokeThickness="2" Grid.Column="0" HorizontalAlignment="Center" VerticalAlignment="Center" />
                                    </Grid>
                                </Border>
                                <Border BorderBrush="#FF939393" HorizontalAlignment="Left" x:Name="slider" Width="30" Height="20" BorderThickness="1" CornerRadius="3" RenderTransformOrigin="0.5,0.5" Margin="0">
                                    <Border.RenderTransform>
                                        <TransformGroup>
                                            <ScaleTransform ScaleX="1" ScaleY="1" />
                                            <SkewTransform AngleX="0" AngleY="0" />
                                            <RotateTransform Angle="0" />
                                            <TranslateTransform X="0" Y="0" />
                                        </TransformGroup>
                                    </Border.RenderTransform>
                                    <Border.Background>
                                        <LinearGradientBrush EndPoint="0,1" StartPoint="0,0">
                                            <GradientStop Color="#FFF0F0F0" Offset="0" />
                                            <GradientStop Color="#FFCDCDCD" Offset="0.1" />
                                            <GradientStop Color="#FFFBFBFB" Offset="1" />
                                        </LinearGradientBrush>
                                    </Border.Background>
                                </Border>
                            </Grid>
                        </DockPanel>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsChecked" Value="True">
                                <Trigger.ExitActions>
                                    <BeginStoryboard Storyboard="{StaticResource OnUnchecking}" x:Name="OnUnchecking_BeginStoryboard" />
                                </Trigger.ExitActions>
                                <Trigger.EnterActions>
                                    <BeginStoryboard Storyboard="{StaticResource OnChecking}" x:Name="OnChecking_BeginStoryboard" />
                                </Trigger.EnterActions>
                                <Setter TargetName="On" Property="Stroke" Value="White" />
                                <Setter TargetName="Off" Property="Stroke" Value="White" />
                                <!-- Change Orange or Blue color here -->
                                <Setter TargetName="BackgroundBorder" Property="Background" Value="{StaticResource CheckedBlue}" />
                                <Setter TargetName="BackgroundBorder" Property="BorderBrush" Value="{StaticResource CheckedBlueBorder}" />
                            </Trigger>
                            <Trigger Property="IsEnabled" Value="False">
                                <!-- ToDo: Add Style for Isenabled == False -->
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>

        <Style TargetType="{x:Type ToggleButton}" x:Key="ToggleButtonStyle">
            <Style.Resources>
                <SolidColorBrush x:Key="ControlForeground" Color="#FF202020" />
                <SolidColorBrush x:Key="DisabledBorderBrush" Color="#66000000" />
                <SolidColorBrush x:Key="ControlHighlight" Color="#80FFFFFF" />
                <SolidColorBrush x:Key="FocusVisualBrush" Color="#00000000" />

                <LinearGradientBrush x:Key="DisabledBrush" EndPoint="0.5,1" StartPoint="0.5,0">
                    <GradientStop Color="#FF9C9DA0" />
                    <GradientStop Color="#FF8B8C8E" Offset="1" />
                </LinearGradientBrush>

                <LinearGradientBrush x:Key="ControlBackgroundNormal" EndPoint="0.5,1" StartPoint="0.5,0">
                    <GradientStop Color="#FFA0BB0E" Offset="0.176" />
                    <GradientStop Color="#FF6D9700" Offset="0.894" />
                </LinearGradientBrush>

                <LinearGradientBrush x:Key="ControlBackgroundOver" EndPoint="0.5,1" StartPoint="0.5,0">
                    <GradientStop Color="#FFAECC07" Offset="0.228" />
                    <GradientStop Color="#FF83B100" Offset="0.849" />
                </LinearGradientBrush>

                <Color x:Key="ColorForegroundShadowColor">#FFDEDEDE</Color>
                <DropShadowEffect x:Key="ControlShadowEffect" BlurRadius="1" Color="#000000" Direction="-90" Opacity="0.55" ShadowDepth="1" />
            </Style.Resources>
            <Setter Property="Padding" Value="18,6" />
            <Setter Property="Foreground" Value="{StaticResource ControlForeground}" />
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type ToggleButton}">
                        <Grid x:Name="Root">
                            <VisualStateManager.VisualStateGroups>
                                <VisualStateGroup x:Name="CommonStates">
                                    <VisualStateGroup.Transitions>
                                        <VisualTransition GeneratedDuration="0:0:0.1" />
                                        <VisualTransition To="Pressed" />
                                        <VisualTransition From="Pressed" />
                                    </VisualStateGroup.Transitions>
                                    <VisualState x:Name="Normal" />
                                    <VisualState x:Name="MouseOver">
                                        <Storyboard>
                                            <DoubleAnimation Duration="0" Storyboard.TargetName="MouseOverElement" Storyboard.TargetProperty="(UIElement.Opacity)" To="1" />
                                        </Storyboard>
                                    </VisualState>
                                    <VisualState x:Name="Disabled">
                                        <Storyboard>
                                            <DoubleAnimation Duration="0" Storyboard.TargetName="NormalElement" Storyboard.TargetProperty="(UIElement.Opacity)" To="0" />
                                            <DoubleAnimation Duration="0" Storyboard.TargetName="DisabledElement" Storyboard.TargetProperty="(UIElement.Opacity)" To="1" />
                                            <DoubleAnimation Duration="0" Storyboard.TargetName="HighlightElement" Storyboard.TargetProperty="(UIElement.Opacity)" To="0.5" />
                                            <DoubleAnimation Duration="0" Storyboard.TargetName="ContentHost" Storyboard.TargetProperty="(UIElement.Opacity)" To="0.75" />
                                        </Storyboard>
                                    </VisualState>
                                </VisualStateGroup>

                                <VisualStateGroup x:Name="CheckStates">
                                    <VisualState x:Name="Checked">
                                        <Storyboard>
                                            <DoubleAnimation Duration="0" To="0" Storyboard.TargetProperty="(UIElement.Opacity)" Storyboard.TargetName="NormalElement" />
                                            <DoubleAnimation Duration="0" To="0" Storyboard.TargetProperty="(UIElement.Opacity)" Storyboard.TargetName="HighlightElement" />
                                            <DoubleAnimation Duration="0" To="1" Storyboard.TargetProperty="(UIElement.Opacity)" Storyboard.TargetName="CheckedElement" />

                                            <!--<ObjectAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Visibility)" Storyboard.TargetName="MouseOverElement">
												<DiscreteObjectKeyFrame KeyTime="0" Value="{x:Static Visibility.Collapsed}" />
											</ObjectAnimationUsingKeyFrames>-->
                                        </Storyboard>
                                    </VisualState>
                                    <VisualState x:Name="Unchecked" />
                                    <VisualState x:Name="Indeterminate" />
                                </VisualStateGroup>

                                <VisualStateGroup x:Name="FocusStates">
                                    <VisualState x:Name="Focused">
                                        <Storyboard>
                                            <DoubleAnimation Duration="0" Storyboard.TargetName="FocusVisualElement" Storyboard.TargetProperty="(UIElement.Opacity)" To="1" />
                                        </Storyboard>
                                    </VisualState>
                                    <VisualState x:Name="Unfocused" />
                                </VisualStateGroup>
                            </VisualStateManager.VisualStateGroups>

                            <Border x:Name="DisabledElement" Background="{StaticResource DisabledBrush}" CornerRadius="2" Opacity="0">
                                <Border BorderBrush="{StaticResource DisabledBorderBrush}" BorderThickness="0,0,1,1" CornerRadius="2" />
                            </Border>
                            <Border x:Name="NormalElement" Background="{StaticResource ControlBackgroundNormal}" CornerRadius="2" Effect="{StaticResource ControlShadowEffect}" />
                            <Border x:Name="CheckedElement" CornerRadius="2.5" BorderBrush="#D0494a4d" BorderThickness="1" Margin="0,-1,0,-1" Opacity="0" Background="{StaticResource ControlBackgroundNormal}">
                                <Border BorderBrush="#70303030" BorderThickness="1,1,0,0" CornerRadius="2">
                                    <Border BorderBrush="#30303030" BorderThickness="1" CornerRadius="1.5">
                                        <Border BorderBrush="#10303030" BorderThickness="1,1,0,0" CornerRadius="1" />
                                    </Border>
                                </Border>
                            </Border>
                            <Border x:Name="MouseOverElement" Background="{StaticResource ControlBackgroundOver}" CornerRadius="2" Opacity="0" />
                            <Border x:Name="HighlightElement" BorderBrush="{StaticResource ControlHighlight}" BorderThickness="1,1,0,0" CornerRadius="2" />

                            <ContentPresenter x:Name="ContentHost" Margin="{TemplateBinding Padding}"
        						HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
        						VerticalAlignment="{TemplateBinding VerticalContentAlignment}">
                                <ContentPresenter.Effect>
                                    <DropShadowEffect Color="{StaticResource ColorForegroundShadowColor}" Direction="-90" BlurRadius="1" ShadowDepth="1" Opacity="0.5" />
                                </ContentPresenter.Effect>
                            </ContentPresenter>

                            <Rectangle x:Name="FocusVisualElement" IsHitTestVisible="False" Margin="1" Opacity="0" RadiusX="1" RadiusY="1" 
        						Stroke="{StaticResource FocusVisualBrush}" StrokeThickness="1" />
                        </Grid>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>

        <Style x:Key="TaskListViewItemStyle" TargetType="{x:Type ListViewItem}">
            <Style.Resources>
                <converters:BoolToBrushConverter x:Key="BoolToBackground" FalseBrushValue="White" TrueBrushValue="#f8ce53"/>
                <converters:BoolToBrushConverter x:Key="BoolToBorder" FalseBrushValue="#D0D0D0" TrueBrushValue="#f8ce53"/>
            </Style.Resources>

            <Setter Property="Background" Value="{Binding (core:IHydraTask.Settings).IsEnabled, Converter={StaticResource BoolToBackground}}"/>
            <Setter Property="BorderBrush" Value="{Binding (core:IHydraTask.Settings).IsEnabled, Converter={StaticResource BoolToBorder}}" />
            <Setter Property="BorderThickness" Value="3" />
            <Setter Property="Margin" Value="2" />
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type ListViewItem}">
                        <Border x:Name="border" Padding="{TemplateBinding Padding}" Background="{TemplateBinding Background}"
        					BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}"
        					CornerRadius="3">
                            <StackPanel Margin="5">
                                <StackPanel Orientation="Horizontal">
                                    <ex:BmpImage Source="{Binding XPath='pack://application:,,,Resources/logo.png'}" Width="24" Height="24" VerticalAlignment="Center" />
                                    <TextBlock FontWeight="Bold" Text="{Binding (core:IHydraTask.Settings).Title}" VerticalAlignment="Center" Margin="5,0,0,0" />
                                </StackPanel>
                                <StackPanel Orientation="Horizontal" x:Name="buttons" Visibility="Collapsed" Margin="0,3,0,0">
                                    <Button Margin="3" Padding="0" BorderBrush="{x:Null}" x:Name="btnSettings" Focusable="False" Background="Transparent"
        								Command="{x:Static hydra:MainWindow.EditTaskSettingsCommand}"
        								CommandParameter="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ListViewItem}}}">
                                        <Button.Opacity>
                                            <MultiBinding Converter="{StaticResource MultiBoolToOpacityConverter}" ConverterParameter="true">
                                                <Binding Path="IsStarted" RelativeSource="{RelativeSource FindAncestor, AncestorType={x:Type hydra:MainWindow}}"/>
                                                <Binding Path="(core:IHydraTask.Settings).IsEnabled"/>
                                            </MultiBinding>
                                        </Button.Opacity>

                                        <ex:BmpImage Source="pack://application:,,,/StockSharp.Xaml;component/Images/edit_24x24.png" ToolTip="{x:Static loc:LocalizedStrings.XamlStr412}" Width="24" Height="24"/>
                                    </Button>

                                    <CheckBox Style="{StaticResource OrangeSwitchStyle}" Margin="3" IsChecked="{Binding (core:IHydraTask.Settings).IsEnabled}" DockPanel.Dock="Right"
        								Opacity="{Binding IsStarted, ConverterParameter=true, Converter={StaticResource BoolToOpacityConverter}, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type hydra:MainWindow}}}"
        								Command="{x:Static hydra:MainWindow.TaskEnabledChangedCommand}"
        								CommandParameter="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ListViewItem}}}" />

                                    <Button Background="Transparent" Margin="3" Padding="0" BorderBrush="{x:Null}" x:Name="btnClose" Focusable="False"
        								Command="{x:Static hydra:MainWindow.RemoveTaskCommand}"
        								CommandParameter="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ListViewItem}}}">
                                        <Button.Opacity>
                                            <MultiBinding Converter="{StaticResource MultiBoolToOpacityConverter}" ConverterParameter="true">
                                                <Binding Path="IsStarted" RelativeSource="{RelativeSource FindAncestor, AncestorType={x:Type hydra:MainWindow}}"/>
                                                <Binding Path="(core:IHydraTask.Settings).IsEnabled"/>
                                            </MultiBinding>
                                        </Button.Opacity>

                                        <ex:BmpImage Source="Images\Close.png" Width="24" Height="24" ToolTip="{x:Static loc:LocalizedStrings.XamlStr787}" x:Name="imgClose" />
                                    </Button>
                                </StackPanel>
                            </StackPanel>
                        </Border>

                        <ControlTemplate.Triggers>
                            <Trigger Property="IsSelected" Value="True">
                                <Setter TargetName="border" Property="BorderBrush" Value="#f8ce53" />
                                <Setter TargetName="buttons" Property="Visibility" Value="Visible" />
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
            <EventSetter Event="MouseDoubleClick" Handler="CurrentTasks_OnSelectionItemDoubleClick"/>
        </Style>

        <ex:AutoRefreshCollectionViewSource Source="{Binding Tasks}" x:Key="SortedSources" Filter="SortedSources_OnFilter">
            <ex:AutoRefreshCollectionViewSource.SortDescriptions>
                <componentModel:SortDescription PropertyName="Settings.IsEnabled" Direction="Descending"/>
            </ex:AutoRefreshCollectionViewSource.SortDescriptions>
        </ex:AutoRefreshCollectionViewSource>

        <ex:AutoRefreshCollectionViewSource Source="{Binding Tasks}" x:Key="SortedTools" Filter="SortedTools_OnFilter">
            <ex:AutoRefreshCollectionViewSource.SortDescriptions>
                <componentModel:SortDescription PropertyName="Settings.IsEnabled" Direction="Descending"/>
            </ex:AutoRefreshCollectionViewSource.SortDescriptions>
        </ex:AutoRefreshCollectionViewSource>
    </fluent:RibbonWindow.Resources>

    <fluent:RibbonWindow.CommandBindings>
        <CommandBinding Command="{x:Static hydra:MainWindow.TaskEnabledChangedCommand}"
    		Executed="ExecutedTaskEnabledChangedCommand"
    		CanExecute="CanExecuteTaskEnabledChangedCommand" />

        <CommandBinding Command="{x:Static hydra:MainWindow.RemoveTaskCommand}"
    		Executed="ExecutedRemoveTaskCommand"
    		CanExecute="CanExecuteRemoveTaskCommand" />

        <CommandBinding Command="{x:Static hydra:MainWindow.EditTaskSettingsCommand}"
    		Executed="ExecutedEditTaskSettingsCommand"
    		CanExecute="CanExecuteEditTaskSettingsCommand" />

        <CommandBinding Command="{x:Static hydra:MainWindow.OpenLogCommand}"
    		Executed="ExecutedOpenLogCommand" />

        <CommandBinding Command="{x:Static hydra:MainWindow.TargetPlatformCommand}"
    		Executed="ExecutedTargetPlatformCommand" />

        <CommandBinding Command="{x:Static hydra:MainWindow.HelpCommand}"
    		Executed="ExecutedHelpCommand" />

        <CommandBinding Command="{x:Static hydra:MainWindow.AboutCommand}"
    		Executed="ExecutedAboutCommand" />

        <CommandBinding Command="{x:Static hydra:MainWindow.LogDirectoryCommand}"
    		Executed="ExecutedLogDirectoryCommand" />

        <CommandBinding Command="{x:Static hydra:MainWindow.CopyToBufferCommand}"
    		Executed="ExecutedCopyToBufferCommand"
    		CanExecute="CanExecuteCopyToBufferCommand" />

        <CommandBinding Command="Close" 
    		Executed="ExecutedExit" />

        <CommandBinding Command="{x:Static hydra:MainWindow.OpenPaneCommand}"
    		Executed="ExecutedOpenPaneCommand" />

        <CommandBinding Command="{x:Static hydra:MainWindow.ImportPaneCommand}"
    		Executed="ExecutedImportPaneCommand" />

        <CommandBinding Command="{x:Static hydra:MainWindow.AnalyticsCommand}"
    		Executed="ExecutedAnalyticsCommand" />

        <CommandBinding Command="{x:Static hydra:MainWindow.BoardsCommand}"
    		Executed="ExecutedBoardsCommand" />

        <CommandBinding Command="{x:Static hydra:MainWindow.MemoryStatisticsCommand}"
    		Executed="ExecutedMemoryStatisticsCommand" />

        <CommandBinding Command="{x:Static hydra:MainWindow.AddSourcesCommand}"
    		Executed="ExecutedAddSourcesCommand" />

        <CommandBinding Command="{x:Static hydra:MainWindow.AddToolsCommand}"
    		Executed="ExecutedAddToolsCommand" />
    </fluent:RibbonWindow.CommandBindings>
    
    <xctk:BusyIndicator x:Name="BusyIndicator">

        <DockPanel LastChildFill="True">
            <fluent:Ribbon DockPanel.Dock="Top" ShowQuickAccessToolBarAboveRibbon="true">
                <fluent:RibbonTabItem HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Header="{x:Static loc:LocalizedStrings.File}">
                    <fluent:RibbonGroupBox d:LayoutOverrides="Height">
                        <fluent:ToggleButton x:Name="StartStop" Click="StartStopClick" Width="100" Height="29" Margin="2,2,2,2" HorizontalContentAlignment="Center" Content="{x:Static loc:LocalizedStrings.Str2421}" Style="{StaticResource ToggleButtonStyle}"/>
                    </fluent:RibbonGroupBox>
                    <fluent:RibbonGroupBox d:LayoutOverrides="Height">
                        <fluent:MenuItem Command="{x:Static hydra:MainWindow.AddSourcesCommand}">
                            <fluent:MenuItem.Header>
                                <TextBlock><Run Text="{x:Static loc:LocalizedStrings.XamlStr140}"/><Run Text="..."/></TextBlock>
                            </fluent:MenuItem.Header>
                        </fluent:MenuItem>
                        <fluent:MenuItem Command="{x:Static hydra:MainWindow.AddToolsCommand}">
                            <fluent:MenuItem.Header>
                                <TextBlock><Run Text="{x:Static loc:LocalizedStrings.XamlStr136}"/><Run Text="..."/></TextBlock>
                            </fluent:MenuItem.Header>
                        </fluent:MenuItem>

                    </fluent:RibbonGroupBox>
                    <fluent:RibbonGroupBox d:LayoutOverrides="Height" State="Small" >
                        <fluent:RibbonMenu Height="100">

                            <fluent:MenuItem Header="{x:Static loc:LocalizedStrings.Import}">
                                <fluent:MenuItem Header="{x:Static loc:LocalizedStrings.Securities}" Command="{x:Static hydra:MainWindow.ImportPaneCommand}" CommandParameter="Security"/>
                                <fluent:MenuItem Header="{x:Static loc:LocalizedStrings.Ticks}" Command="{x:Static hydra:MainWindow.ImportPaneCommand}" CommandParameter="Trade"/>
                                <fluent:MenuItem Header="{x:Static loc:LocalizedStrings.MarketDepths}" Command="{x:Static hydra:MainWindow.ImportPaneCommand}" CommandParameter="Depth"/>
                                <fluent:MenuItem Header="{x:Static loc:LocalizedStrings.Candles}" Command="{x:Static hydra:MainWindow.ImportPaneCommand}" CommandParameter="Candle"/>
                                <fluent:MenuItem Header="{x:Static loc:LocalizedStrings.OrderLog}" Command="{x:Static hydra:MainWindow.ImportPaneCommand}" CommandParameter="OrderLog"/>
                                <fluent:MenuItem Header="{x:Static loc:LocalizedStrings.Level1}" Command="{x:Static hydra:MainWindow.ImportPaneCommand}" CommandParameter="Level1"/>
                                <fluent:MenuItem Header="{x:Static loc:LocalizedStrings.News}" Command="{x:Static hydra:MainWindow.ImportPaneCommand}" CommandParameter="News"/>
                                <fluent:MenuItem Header="{x:Static loc:LocalizedStrings.Transactions}" Command="{x:Static hydra:MainWindow.ImportPaneCommand}" CommandParameter="Transaction"/>
                            </fluent:MenuItem>

                            <fluent:MenuItem Header="{x:Static loc:LocalizedStrings.Export}">
                                <fluent:MenuItem Header="{x:Static loc:LocalizedStrings.Securities}" Command="{x:Static hydra:MainWindow.OpenPaneCommand}" CommandParameter="Security"/>
                                <fluent:MenuItem Header="{x:Static loc:LocalizedStrings.Ticks}" Command="{x:Static hydra:MainWindow.OpenPaneCommand}" CommandParameter="Trade"/>
                                <fluent:MenuItem Header="{x:Static loc:LocalizedStrings.MarketDepths}" Command="{x:Static hydra:MainWindow.OpenPaneCommand}" CommandParameter="Depth"/>
                                <fluent:MenuItem Header="{x:Static loc:LocalizedStrings.Candles}" Command="{x:Static hydra:MainWindow.OpenPaneCommand}" CommandParameter="Candle"/>
                                <fluent:MenuItem Header="{x:Static loc:LocalizedStrings.OrderLog}" Command="{x:Static hydra:MainWindow.OpenPaneCommand}" CommandParameter="OrderLog"/>
                                <fluent:MenuItem Header="Level 1" Command="{x:Static hydra:MainWindow.OpenPaneCommand}" CommandParameter="Level1"/>
                                <fluent:MenuItem Header="{x:Static loc:LocalizedStrings.News}" Command="{x:Static hydra:MainWindow.OpenPaneCommand}" CommandParameter="News"/>
                                <fluent:MenuItem Header="{x:Static loc:LocalizedStrings.Transactions}" Command="{x:Static hydra:MainWindow.OpenPaneCommand}" CommandParameter="Transaction"/>
                            </fluent:MenuItem>

                            <fluent:MenuItem Header="{x:Static loc:LocalizedStrings.Securities}">
                                <fluent:MenuItem Header="{x:Static loc:LocalizedStrings.Str2835}" Command="{x:Static hydra:MainWindow.OpenPaneCommand}" CommandParameter="Security"/>
                                <fluent:MenuItem Header="{x:Static loc:LocalizedStrings.Str2892}" Click="GluingData_Click"/>
                            </fluent:MenuItem>

                            <fluent:MenuItem Header="{x:Static loc:LocalizedStrings.Str2121}">
                                <fluent:MenuItem x:Name="Analytics" Header="{x:Static loc:LocalizedStrings.Str1221}" Command="{x:Static hydra:MainWindow.AnalyticsCommand}" />
                                <Separator/>
                                <fluent:MenuItem x:Name="ResetSettings" Header="{x:Static loc:LocalizedStrings.Str1520}" Click="ResetSettings_Click" IsEnabled="{Binding IsStarted, Converter={StaticResource BoolToOppositeConverter}, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type hydra:MainWindow}}}"/>
                                <fluent:MenuItem x:Name="EraseData" Header="{x:Static loc:LocalizedStrings.XamlStr786}" Click="EraseData_Click" IsEnabled="{Binding IsStarted, Converter={StaticResource BoolToOppositeConverter}, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type hydra:MainWindow}}}"/>
                                <Separator/>
                                <fluent:MenuItem Header="{x:Static loc:LocalizedStrings.Str2831}" Command="{x:Static hydra:MainWindow.BoardsCommand}" />
                                <fluent:MenuItem x:Name="Synchronize" Click="Synchronize_Click" IsEnabled="{Binding IsStarted, Converter={StaticResource BoolToOppositeConverter}, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type hydra:MainWindow}}}">
                                    <fluent:MenuItem.Header>
                                        <TextBlock><Run Text="{x:Static loc:LocalizedStrings.XamlStr652}" /><Run Text="..."/></TextBlock>
                                    </fluent:MenuItem.Header>
                                </fluent:MenuItem>
                                <Separator/>
                                <fluent:MenuItem x:Name="ProxyButton" Click="ProxySettings_Click">
                                    <fluent:MenuItem.Header>
                                        <TextBlock><Run Text="{x:Static loc:LocalizedStrings.NetworkSettings}" /><Run Text="..."/></TextBlock>
                                    </fluent:MenuItem.Header>
                                </fluent:MenuItem>
                                <fluent:MenuItem x:Name="ServiceButton" Click="Settings_Click">
                                    <fluent:MenuItem.Header>
                                        <TextBlock><Run Text="{x:Static loc:LocalizedStrings.Settings}" /><Run Text="..."/></TextBlock>
                                    </fluent:MenuItem.Header>
                                </fluent:MenuItem>
                            </fluent:MenuItem>

                            <fluent:MenuItem Header="{x:Static loc:LocalizedStrings.Str3237}">
                                <fluent:MenuItem Header="{x:Static loc:LocalizedStrings.XamlStr106}" Command="{x:Static hydra:MainWindow.OpenLogCommand}" />
                                <Separator/>
                                <fluent:MenuItem Header="{x:Static loc:LocalizedStrings.LogDirectory}" Command="{x:Static hydra:MainWindow.LogDirectoryCommand}"/>
                                <Separator/>
                                <fluent:MenuItem x:Name="MemoryStatMenuItem" Header="{x:Static loc:LocalizedStrings.MemoryStatistics}" Command="{x:Static hydra:MainWindow.MemoryStatisticsCommand}"/>
                            </fluent:MenuItem>

                            <fluent:MenuItem Header="{x:Static loc:LocalizedStrings.Help}">
                                <fluent:MenuItem Header="{x:Static loc:LocalizedStrings.OnlineDoc}" Command="{x:Static hydra:MainWindow.HelpCommand}"/>
                                <fluent:MenuItem Header="{x:Static loc:LocalizedStrings.Str1470}" x:Name="MnuCheckForUpdates"/>
                                <fluent:MenuItem Header="{x:Static loc:LocalizedStrings.XamlStr610}" x:Name="MnuTargetPlatform" Command="{x:Static hydra:MainWindow.TargetPlatformCommand}"/>
                                <Separator/>
                                <fluent:MenuItem Command="{x:Static hydra:MainWindow.AboutCommand}">
                                    <fluent:MenuItem.Header>
                                        <TextBlock><Run Text="{x:Static loc:LocalizedStrings.About}" /><Run Text="..."/></TextBlock>
                                    </fluent:MenuItem.Header>
                                </fluent:MenuItem>
                            </fluent:MenuItem>
                        </fluent:RibbonMenu>

                    </fluent:RibbonGroupBox>

                </fluent:RibbonTabItem>
                <fluent:RibbonTabItem HorizontalAlignment="Stretch" VerticalAlignment="Stretch"/>

            </fluent:Ribbon>

            <fluent:RibbonTitleBar Header="RibbonTitleBar" VerticalAlignment="Top" DockPanel.Dock="Top">
                <controls1:AutomaticUpdater x:Name="AutomaticUpdater" HorizontalAlignment="Right" VerticalAlignment="Center" Margin="10" DockPanel.Dock="Right"
					DaysBetweenChecks="0" WaitBeforeCheckSecs="60" UpdateType="OnlyCheck" Animate="True" KeepHidden="False" wyUpdateLocation="Hydra.Update.exe" />
                <fluent:MenuItem Header="MenuItem" Height="100" Width="100"/>
                <fluent:MenuItem Header="MenuItem" Height="100" Width="100"/>
            </fluent:RibbonTitleBar>
            <fluent:StatusBar   HorizontalAlignment="Stretch" Margin="0" DockPanel.Dock="Bottom" Height="30" VerticalContentAlignment="Stretch" HorizontalContentAlignment="Stretch">
                <fluent:StatusBarItem>
                    <StackPanel Width="800" Height="30" Orientation="Horizontal" Margin="5,0,0,0">
                        <TextBlock x:Name="Status" VerticalAlignment="Center"/>
                        <ex:BmpImage x:Name="LastWarnError" Margin="2" Source="pack://application:,,,/StockSharp.Xaml;component/Images/warning_16x16.png" Width="16" Height="16" VerticalAlignment="Center" Visibility="Collapsed" />
                        <ex:BmpImage x:Name="LastLogError" Margin="2" Source="pack://application:,,,/StockSharp.Xaml;component/Images/error_16x16.png" Width="16" Height="16" VerticalAlignment="Center" Visibility="Collapsed" />
                        <Label VerticalContentAlignment="Center" x:Name="LastLogMessageCtrl" Height="25" ToolTip="{Binding Content, RelativeSource={RelativeSource Self}}">
                            <Label.ContextMenu>
                                <ContextMenu>
                                    <MenuItem Header="{x:Static loc:LocalizedStrings.XamlStr660}" Command="{x:Static hydra:MainWindow.CopyToBufferCommand}" 
										CommandTarget="{Binding PlacementTarget, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ContextMenu}}}"/>
                                </ContextMenu>
                            </Label.ContextMenu>
                        </Label>
                    </StackPanel>
                </fluent:StatusBarItem>

            </fluent:StatusBar>

            <xcad:DockingManager Height="Auto" Width="Auto" x:Name="Docking" >
                <xcad:DockingManager.Theme>
                    <xcad:VS2010Theme/>
                </xcad:DockingManager.Theme>
                <!-- xcad:DockingManager.DocumentContextMenu>
                    <ContextMenu>
                        <MenuItem Header="Close" 
                                    Command="{Binding Path=CloseCommand}"
                                    Visibility="{Binding Path=IsEnabled, RelativeSource={RelativeSource Self}, 
                                    Mode=OneWay, Converter={StaticResource BoolToVisibilityConverter}}"
                                />
                        <MenuItem Header="Close But This" 
                                    Command="{Binding Path=CloseAllButThisCommand}"
                                />
                        <MenuItem Header="Float" 
                                    Command="{Binding Path=FloatCommand}"
                                />
                        <MenuItem Header="Dock" 
                                    Command="{Binding Path=DockAsDocumentCommand}"
                                />
                        <MenuItem Header="New horizontal group" 
                                    Command="{Binding Path=NewHorizontalTabGroupCommand}"
                                    Visibility="{Binding Path=IsEnabled, RelativeSource={RelativeSource Self}, 
                                    Mode=OneWay, Converter={StaticResource BoolToVisibilityConverter}}"
                                />
                    </ContextMenu>
                </ -->

                <xcad:LayoutRoot>
                    <xcad:LayoutPanel Orientation="Horizontal">
                        <xcad:LayoutAnchorablePaneGroup DockWidth="200" Orientation="Vertical" >
                            <xcad:LayoutAnchorablePane>
                                <xcad:LayoutAnchorable Title="{x:Static loc:LocalizedStrings.XamlStr227}" CanAutoHide="True" CanClose="False" CanFloat="True">
                                    <DockPanel>
                                        <ListView x:Name="CurrentSources"
                                                          ItemContainerStyle="{StaticResource TaskListViewItemStyle}"
                                                          ItemsSource="{Binding Source={StaticResource SortedSources}}"
                                                	      ScrollViewer.HorizontalScrollBarVisibility="Disabled"
                                                          ScrollViewer.VerticalScrollBarVisibility="Visible"
                                                          SelectionChanged="CurrentTasks_OnSelectionChanged"
                                                          d:LayoutOverrides="Width, LeftMargin, RightMargin, TopMargin, BottomMargin"
                                                          >
                                            <ListView.ContextMenu>
                                                <xcad:ContextMenuEx>
                                                    <MenuItem Header="{x:Static loc:LocalizedStrings.XamlStr140}" Command="{x:Static hydra:MainWindow.AddSourcesCommand}" />
                                                    <MenuItem Header="Current Task" Command="{x:Static hydra:MainWindow.OpenPaneCommand}" CommandParameter="selected_task" />
                                                </xcad:ContextMenuEx>
                                            </ListView.ContextMenu>
                                            <ListView.ItemsPanel>
                                                <ItemsPanelTemplate>
                                                    <StackPanel/>
                                                </ItemsPanelTemplate>
                                            </ListView.ItemsPanel>
                                        </ListView>
                                    </DockPanel>
                                </xcad:LayoutAnchorable>
                            </xcad:LayoutAnchorablePane>
                            <xcad:LayoutAnchorablePane>
                                <xcad:LayoutAnchorable Title="{x:Static loc:LocalizedStrings.XamlStr166}" CanAutoHide="True" CanClose="False" CanFloat="True">
                                    <DockPanel>
                                        <ListView x:Name="CurrentTools" ItemContainerStyle="{StaticResource TaskListViewItemStyle}"
													ItemsSource="{Binding Source={StaticResource SortedTools}}"
													ScrollViewer.HorizontalScrollBarVisibility="Disabled"
													ScrollViewer.VerticalScrollBarVisibility="Visible"
													>
                                            <ListView.ItemsPanel>
                                                <ItemsPanelTemplate>
                                                    <StackPanel>
                                                    </StackPanel>
                                                </ItemsPanelTemplate>
                                            </ListView.ItemsPanel>
                                            <ListView.ContextMenu>
                                                <xcad:ContextMenuEx>
                                                    <MenuItem Header="{x:Static loc:LocalizedStrings.XamlStr136}" Command="{x:Static hydra:MainWindow.AddToolsCommand}" Margin="25,0" />
                                                    <MenuItem Header="Current Task" Command="{x:Static hydra:MainWindow.OpenPaneCommand}" CommandParameter="selected_source" />
                                                </xcad:ContextMenuEx>
                                            </ListView.ContextMenu>
                                        </ListView>
                                    </DockPanel>
                                </xcad:LayoutAnchorable>
                            </xcad:LayoutAnchorablePane>
                        </xcad:LayoutAnchorablePaneGroup>

                        <xcad:LayoutDocumentPaneGroup>
                            <xcad:LayoutDocumentPane x:Name="DockSite">
                                <xcad:LayoutDocument Title="Doc1">
                                    <TextBox/>
                                </xcad:LayoutDocument>
                                <xcad:LayoutDocument Title="{x:Static loc:LocalizedStrings.Str3237}" x:Name="LogToolWindow" CanClose="False" CanFloat="True">
                                    <sx:Monitor x:Name="MonitorControl" ShowStrategies="False" />
                                </xcad:LayoutDocument>
                            </xcad:LayoutDocumentPane>
                        </xcad:LayoutDocumentPaneGroup>
                    </xcad:LayoutPanel>
                </xcad:LayoutRoot>
            </xcad:DockingManager>
        </DockPanel>
    </xctk:BusyIndicator>
</fluent:RibbonWindow>